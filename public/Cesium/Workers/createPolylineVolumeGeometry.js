define(["./defaultValue-f6d5e6da","./Matrix3-b2351961","./arrayRemoveDuplicates-0d8dde26","./BoundingRectangle-4ef16803","./Transforms-f17097e5","./Matrix2-7a8e9daf","./ComponentDatatype-ab629b88","./PolylineVolumeGeometryLibrary-5050cb1d","./GeometryAttribute-9c1a6bab","./GeometryAttributes-1e4ddcd2","./GeometryPipeline-a9233ae3","./IndexDatatype-a9b1bc18","./Math-355606c6","./PolygonPipeline-3fa47499","./VertexFormat-fbdec922","./combine-0c102d93","./RuntimeError-9b4ce3fb","./WebGLConstants-7f557f93","./EllipsoidTangentPlane-c3e9d965","./AxisAlignedBoundingBox-04c1a5e3","./IntersectionTests-f1b36d69","./Plane-5931b53e","./PolylinePipeline-8df321dd","./EllipsoidGeodesic-20aaff03","./EllipsoidRhumbLine-1289f7e8","./AttributeCompression-0b8f7b7d","./EncodedCartesian3-abad5e8c"],function(e,t,n,i,a,o,r,l,s,p,d,u,c,m,y,g,f,h,b,P,E,_,k,v,V,x,L){"use strict";function C(n){let i=(n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT)).polylinePositions,a=n.shapePositions;this._positions=i,this._shape=a,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(n.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(n.cornerType,l.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(e.defaultValue(n.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(n.granularity,c.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";let r=1+i.length*t.Cartesian3.packedLength;r+=1+a.length*o.Cartesian2.packedLength,this.packedLength=r+t.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}C.pack=function(n,i,a){let r;a=e.defaultValue(a,0);let l=n._positions,s=l.length;for(i[a++]=s,r=0;r<s;++r,a+=t.Cartesian3.packedLength)t.Cartesian3.pack(l[r],i,a);let p=n._shape;for(s=p.length,i[a++]=s,r=0;r<s;++r,a+=o.Cartesian2.packedLength)o.Cartesian2.pack(p[r],i,a);return t.Ellipsoid.pack(n._ellipsoid,i,a),a+=t.Ellipsoid.packedLength,y.VertexFormat.pack(n._vertexFormat,i,a),a+=y.VertexFormat.packedLength,i[a++]=n._cornerType,i[a]=n._granularity,i};let F=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),A=new y.VertexFormat,T={polylinePositions:void 0,shapePositions:void 0,ellipsoid:F,vertexFormat:A,cornerType:void 0,granularity:void 0};C.unpack=function(n,i,a){let r;i=e.defaultValue(i,0);let l=n[i++],s=Array(l);for(r=0;r<l;++r,i+=t.Cartesian3.packedLength)s[r]=t.Cartesian3.unpack(n,i);l=n[i++];let p=Array(l);for(r=0;r<l;++r,i+=o.Cartesian2.packedLength)p[r]=o.Cartesian2.unpack(n,i);let d=t.Ellipsoid.unpack(n,i,F);i+=t.Ellipsoid.packedLength;let u=y.VertexFormat.unpack(n,i,A);i+=y.VertexFormat.packedLength;let c=n[i++],m=n[i];return e.defined(a)?(a._positions=s,a._shape=p,a._ellipsoid=t.Ellipsoid.clone(d,a._ellipsoid),a._vertexFormat=y.VertexFormat.clone(u,a._vertexFormat),a._cornerType=c,a._granularity=m,a):(T.polylinePositions=s,T.shapePositions=p,T.cornerType=c,T.granularity=m,new C(T))};let G=new i.BoundingRectangle;return C.createGeometry=function(e){let o=e._positions,c=n.arrayRemoveDuplicates(o,t.Cartesian3.equalsEpsilon),y=e._shape;if(y=l.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(y),c.length<2||y.length<3)return;m.PolygonPipeline.computeWindingOrder2D(y)===m.WindingOrder.CLOCKWISE&&y.reverse();let g=i.BoundingRectangle.fromPoints(y,G);return function(e,t,n,i){let o,c,y,g,f,h;let b=new p.GeometryAttributes;i.position&&(b.position=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));let P=t.length,E=e.length/3,_=(E-2*P)/(2*P),k=m.PolygonPipeline.triangulate(t),v=(_-1)*P*6+2*k.length,V=u.IndexDatatype.createTypedArray(E,v),x=2*P,L=0;for(o=0;o<_-1;o++){for(c=0;c<P-1;c++)h=(y=2*c+o*P*2)+x,f=(g=y+1)+x,V[L++]=g,V[L++]=y,V[L++]=f,V[L++]=f,V[L++]=y,V[L++]=h;f=(g=(y=2*P-2+o*P*2)+1)+x,h=y+x,V[L++]=g,V[L++]=y,V[L++]=f,V[L++]=f,V[L++]=y,V[L++]=h}if(i.st||i.tangent||i.bitangent){let e=new Float32Array(2*E),i=1/(_-1),a=1/n.height,l=n.height/2,p,d,u=0;for(o=0;o<_;o++){for(p=o*i,d=a*(t[0].y+l),e[u++]=p,e[u++]=d,c=1;c<P;c++)d=a*(t[c].y+l),e[u++]=p,e[u++]=d,e[u++]=p,e[u++]=d;d=a*(t[0].y+l),e[u++]=p,e[u++]=d}for(c=0;c<P;c++)p=0,d=a*(t[c].y+l),e[u++]=p,e[u++]=d;for(c=0;c<P;c++)p=(_-1)*i,d=a*(t[c].y+l),e[u++]=p,e[u++]=d;b.st=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(e)})}let C=E-2*P;for(o=0;o<k.length;o+=3){let e=k[o]+C,t=k[o+1]+C,n=k[o+2]+C;V[L++]=e,V[L++]=t,V[L++]=n,V[L++]=n+P,V[L++]=t+P,V[L++]=e+P}let F=new s.Geometry({attributes:b,indices:V,boundingSphere:a.BoundingSphere.fromVertices(e),primitiveType:s.PrimitiveType.TRIANGLES});if(i.normal&&(F=d.GeometryPipeline.computeNormal(F)),i.tangent||i.bitangent){try{F=d.GeometryPipeline.computeTangentAndBitangent(F)}catch(e){l.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(F.attributes.tangent=void 0),i.bitangent||(F.attributes.bitangent=void 0),i.st||(F.attributes.st=void 0)}return F}(l.PolylineVolumeGeometryLibrary.computePositions(c,y,g,e,!0),y,g,e._vertexFormat)},function(n,i){return e.defined(i)&&(n=C.unpack(n,i)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),C.createGeometry(n)}});